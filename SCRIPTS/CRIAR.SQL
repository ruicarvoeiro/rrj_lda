DROP TABLE Recibo;
DROP TABLE Doc_detalhe;
DROP TABLE Produto;
DROP TABLE Iva;
DROP TABLE Meio_entrega;
DROP TABLE Doc_cabecalho;
DROP TABLE Metodo_pag;
DROP TABLE Contatos;
DROP TABLE Cliente;
DROP TABLE Cod_postal;
DROP TABLE Doc_tipo;
DROP SEQUENCE N_CLIENTE;
DROP SEQUENCE N_PRODUTO;
DROP SEQUENCE N_DOCUMENTO_FATURAPRO;
DROP SEQUENCE N_DOCUMENTO_FATURA;
DROP SEQUENCE N_DOCUMENTO_NOTA;

CREATE TABLE Doc_tipo(
	TIPO_DOC NUMBER(3) PRIMARY KEY CHECK (TIPO_DOC = 1 OR TIPO_DOC = 2 OR TIPO_DOC = 3), 
	DESCRICAO NVARCHAR2(15) NOT NULL
	);

CREATE TABLE Cod_postal(
	COD_POSTAL NUMBER(4) PRIMARY KEY CHECK (COD_POSTAL >= 1000 AND COD_POSTAL <= 9999),
	LOCALIDADE_POSTAL NVARCHAR2(50) NOT NULL
	);
CREATE INDEX Loc ON Cod_postal(LOCALIDADE_POSTAL);

CREATE TABLE Cliente(
	ID_CLIENTE INT PRIMARY KEY CHECK(ID_CLIENTE > 0),
	NOME_CLIENTE NVARCHAR2(40) NOT NULL,
	TIPO_ENTIDADE NVARCHAR2(1) NOT NULL CHECK (TIPO_ENTIDADE = 'I' OR TIPO_ENTIDADE = 'C'), 
	NIF_NIPC NUMBER(9)  NOT NULL CHECK (NIF_NIPC >= 100000000 AND NIF_NIPC <= 999999999),
	IBAN LONG  NOT NULL
	);
CREATE INDEX Nome ON Cliente(NOME_CLIENTE);
CREATE INDEX NifNipc ON Cliente(NIF_NIPC);

CREATE TABLE Contatos (
	ID_CLIENTE NUMBER(5) PRIMARY KEY,
	MORADA_SEDE NVARCHAR2(70) NOT NULL,
	COD_POSTAL NUMBER(4),
	NR_TELEFONE NUMBER(9)  NOT NULL CHECK (NR_TELEFONE >= 100000000 AND NR_TELEFONE <= 999999999),
	EMAIL NVARCHAR2(30),
	FOREIGN KEY (ID_CLIENTE) REFERENCES Cliente(ID_CLIENTE),
	FOREIGN KEY (COD_POSTAL) REFERENCES Cod_postal(COD_POSTAL)
	);
CREATE INDEX NrTelefone ON Contatos(NR_TELEFONE);

CREATE TABLE Doc_cabecalho(
	NR_DOCUMENTO NUMBER(5),
	DATA_EMISSAO DATE  NOT NULL,
	TIPO_DOC NUMBER(3) NOT NULL,
	ID_CLIENTE NUMBER(5) NOT NULL,
	MEIO_ENT NUMBER(5),
	PRIMARY KEY(NR_DOCUMENTO, TIPO_DOC),
	FOREIGN KEY (ID_CLIENTE) REFERENCES Cliente(ID_CLIENTE)
	);
CREATE INDEX idCliente ON Doc_cabecalho(ID_CLIENTE);
CREATE INDEX DataEmissao ON Doc_cabecalho(DATA_EMISSAO);

CREATE TABLE Metodo_pag(
	ID_METODO NUMBER(5) PRIMARY KEY CHECK (ID_METODO > 0),
	DESCRICAO NVARCHAR2(15) NOT NULL
	);

CREATE TABLE Meio_entrega(
	ID_MEIO NUMBER(5) PRIMARY KEY CHECK (ID_MEIO > 0), 
	DESCRICAO NVARCHAR2(15) NOT NULL
	);

CREATE TABLE Recibo(
	NR_FATURA NUMBER(5) PRIMARY KEY,
	DATA DATE NOT NULL,
	METODO NUMBER(5) NOT NULL,
	FOREIGN KEY (METODO) REFERENCES Metodo_pag(ID_METODO)
	);
CREATE INDEX DataRecibo ON Recibo(DATA);

CREATE TABLE Iva(
	ID_IVA NUMBER(2) PRIMARY KEY CHECK(ID_IVA > 0),
	VALOR NUMBER(3,2) NOT NULL
	);

CREATE TABLE Produto(
	ID_PRODUTO NUMBER(5) PRIMARY KEY,
	DESCRICAO NVARCHAR2(30) UNIQUE,
	PRECO NUMBER(5,3) NOT NULL CHECK (PRECO > 0),
	ID_IVA NUMBER(5),
	LUCRO NUMBER(3,2) NOT NULL CHECK (LUCRO >= 0.3),
	STOCK NUMBER(3) CHECK (STOCK >= 0),
	FOREIGN KEY (ID_IVA) REFERENCES Iva(ID_IVA)
	);

CREATE TABLE Doc_detalhe(
	NR_DOCUMENTO NUMBER(5),
	NR_CLIENTE NUMBER(5),
	NR_LINHA NUMBER(5),
	TIPO_DOC NUMBER(3),
	ID_PRODUTO NUMBER(5), 
	--QUANTIDADE NUMBER(5) CHECK (QUANTIDADE > 0),
	PESO INT NOT NULL CHECK (PESO > 0),
	ID_MEIO NUMBER(5),
	FOREIGN KEY (NR_DOCUMENTO, TIPO_DOC) REFERENCES Doc_cabecalho(NR_DOCUMENTO, TIPO_DOC),
	PRIMARY KEY (NR_DOCUMENTO, TIPO_DOC, NR_LINHA),
	FOREIGN KEY (ID_MEIO) REFERENCES Meio_entrega(ID_MEIO),
	FOREIGN KEY (ID_PRODUTO) REFERENCES Produto(ID_PRODUTO)
	);

------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE pack_tipo_doc IS
atual_tipo_doc Number(1);
END;
/

------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER ValidaRecibo
BEFORE INSERT ON Recibo
FOR EACH ROW
DECLARE c NUMBER(5);
BEGIN
	SELECT NR_DOCUMENTO INTO C FROM Doc_cabecalho WHERE (NR_DOCUMENTO = :NEW.NR_FATURA AND TIPO_DOC = 2);
	IF C IS NULL THEN raise_application_error(-20502, 'Insira um numero de fatura valido');
	END IF;
END ValidaRecibo;
/

------------------------------------------------------------------------------------

CREATE SEQUENCE N_CLIENTE INCREMENT BY 1 START WITH 1;

CREATE OR REPLACE TRIGGER GERA_ID_CLIENTE
BEFORE INSERT ON Cliente
FOR EACH ROW
BEGIN
	SELECT N_CLIENTE.NEXTVAL INTO :NEW.ID_CLIENTE FROM DUAL;
END GERA_ID_CLIENTE;
/

CREATE OR REPLACE TRIGGER ID_CLIENTE_CONT
BEFORE INSERT ON Contatos
FOR EACH ROW
BEGIN
	SELECT N_CLIENTE.CURRVAL INTO :NEW.ID_CLIENTE FROM DUAL; --HELP
END;
/

------------------------------------------------------------------------------------

CREATE SEQUENCE N_PRODUTO INCREMENT BY 1 START WITH 1;

CREATE OR REPLACE TRIGGER GERA_ID_PRODUTO
BEFORE INSERT ON Produto
FOR EACH ROW
BEGIN
	SELECT N_PRODUTO.NEXTVAL INTO :NEW.ID_PRODUTO FROM DUAL;
END;
/

------------------------------------------------------------------------------------


CREATE SEQUENCE N_DOCUMENTO_FATURAPRO INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE N_DOCUMENTO_FATURA INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE N_DOCUMENTO_NOTA INCREMENT BY 1 START WITH 1;

CREATE OR REPLACE TRIGGER GERA_N_DOC
BEFORE INSERT ON Doc_cabecalho
FOR EACH ROW
BEGIN
	IF :NEW.TIPO_DOC = 1 THEN
		SELECT N_DOCUMENTO_FATURAPRO.NEXTVAL INTO :NEW.NR_DOCUMENTO FROM DUAL;
	END IF;

	IF :NEW.TIPO_DOC = 2 THEN
		SELECT N_DOCUMENTO_FATURA.NEXTVAL INTO :NEW.NR_DOCUMENTO FROM DUAL;
	END IF;

	IF :NEW.TIPO_DOC = 3 THEN
		SELECT N_DOCUMENTO_NOTA.NEXTVAL INTO :NEW.NR_DOCUMENTO FROM DUAL;
	END IF;

	pack_tipo_doc.atual_tipo_doc := :NEW.TIPO_DOC;
END;
/

CREATE OR REPLACE TRIGGER ID_DOC_CONT
BEFORE INSERT ON Doc_detalhe
FOR EACH ROW
BEGIN
	SELECT pack_tipo_doc.atual_tipo_doc INTO :NEW.TIPO_DOC FROM DUAL;
	IF pack_tipo_doc.atual_tipo_doc = 1 THEN
		SELECT N_DOCUMENTO_FATURAPRO.CURRVAL INTO :NEW.NR_DOCUMENTO FROM DUAL;
	END IF;

	IF pack_tipo_doc.atual_tipo_doc = 2 THEN
		SELECT N_DOCUMENTO_FATURA.CURRVAL INTO :NEW.NR_DOCUMENTO FROM DUAL;
	END IF;

	IF pack_tipo_doc.atual_tipo_doc = 3 THEN
		SELECT N_DOCUMENTO_NOTA.CURRVAL INTO :NEW.NR_DOCUMENTO FROM DUAL;
	END IF;
END;
/

COMMIT;